/**
 *  @license dcore - v1.0.0
 *  Copyright Â© 2016 Valentin Lozev
 *  Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
 *  Source code: http://github.com/valentin-lozev/dcore
 */
var dcore;!function(dcore){"use strict";var DefaultSandbox=function(){function DefaultSandbox(core,moduleInstanceId){if(!core||!moduleInstanceId)throw new Error("Missing core or module instance ID.");this.core=core,this.moduleInstanceId=moduleInstanceId}return DefaultSandbox.prototype.subscribe=function(topics,handler){return this.core.subscribe(topics,handler)},DefaultSandbox.prototype.publish=function(topic,data){return this.core.publish(topic,data),this},DefaultSandbox.prototype.start=function(moduleId,options){return this.core.start(moduleId,options),this},DefaultSandbox.prototype.stop=function(moduleId,instanceId){return this.core.stop(moduleId,instanceId),this},DefaultSandbox}();dcore.DefaultSandbox=DefaultSandbox}(dcore||(dcore={}));var dcore;!function(dcore){"use strict";function typeGuard(expected,value,errorMsg){var toThrow=!1;switch(expected){case"array":toThrow=!Array.isArray(value);break;default:toThrow=typeof value!==expected||null===value}if(toThrow)throw new TypeError(errorMsg)}function runPlugins(hookType){for(var params=[],_i=1;_i<arguments.length;_i++)params[_i-1]=arguments[_i];if(!this.state.isRunning)throw new Error("Core is not running.");var plugins=this.hooks[hookType];if(Array.isArray(plugins)){for(var argumentsLength=arguments.length,args=new Array(argumentsLength-1),i=1;i<argumentsLength;i++)args[i-1]=arguments[i];for(var i=0,len=plugins.length;i<len;i++)try{plugins[i].apply(null,args)}catch(ex){var argsDetails=args.length>0?args.join(", "):"none";console.error("Plugin execution failed on hook "+HookType[hookType]+". Arguments: "+argsDetails+". Message: "+ex)}}}function addSubscriber(topic,handler){hasOwnProperty.call(this.subscribers,topic)||(this.subscribers[topic]={});var subscriptionID="sbscrptn"+ ++lastUsedSubscriptionID;return this.subscribers[topic][subscriptionID]=handler,subscriptionID}function createOne(sandboxType,isDebug){return void 0===isDebug&&(isDebug=!0),new Instance(sandboxType,isDebug)}var hasOwnProperty=Object.prototype.hasOwnProperty,lastUsedSubscriptionID=0;!function(HookType){HookType[HookType.Core_DOMReady=0]="Core_DOMReady",HookType[HookType.Core_ModuleDestroy=1]="Core_ModuleDestroy",HookType[HookType.Core_ModuleInit=2]="Core_ModuleInit",HookType[HookType.Core_ModuleRegister=3]="Core_ModuleRegister",HookType[HookType.Core_Publish=4]="Core_Publish",HookType[HookType.Core_Subscribe=5]="Core_Subscribe",HookType[HookType.Core_Unsubscribe=6]="Core_Unsubscribe"}(dcore.HookType||(dcore.HookType={}));var HookType=dcore.HookType,Instance=function(){function Instance(sandboxType,isDebug){void 0===isDebug&&(isDebug=!0),this.subscribers={},this.modules={},this.hooks={},this.Sandbox="function"==typeof sandboxType?sandboxType:dcore.DefaultSandbox,this.state={isDebug:!!isDebug,isRunning:!1}}return Instance.prototype.subscribe=function(topics,handler){var errorMsg="Subscribing failed:";typeGuard("function",handler,errorMsg+" message handler should be a function."),typeGuard("array",topics,errorMsg+" topics should be passed as an array of strings."),runPlugins.call(this,HookType.Core_Subscribe,topics);for(var token={},i=0,len=topics.length;i<len;i++){var topic=topics[i],subscriptionID=addSubscriber.call(this,topic,handler);token[topic]=subscriptionID}var that=this;return{destroy:function(topic){if(0===arguments.length)return void Object.keys(token).forEach(function(t){runPlugins.call(that,HookType.Core_Unsubscribe,t);var subscriptionID=token[t];delete that.subscribers[t][subscriptionID]});if(hasOwnProperty.call(token,topic)){runPlugins.call(that,HookType.Core_Unsubscribe,topic);var subscriptionID=token[topic];delete that.subscribers[topic][subscriptionID]}}}},Instance.prototype.publish=function(topic,data){if(hasOwnProperty.call(this.subscribers,topic)){runPlugins.call(this,HookType.Core_Publish,topic,data);var subscriptions=this.subscribers[topic];Object.keys(subscriptions).forEach(function(key){var handler=subscriptions[key];try{setTimeout(function(){return handler(topic,data)},0)}catch(ex){setTimeout(function(){console.info(topic+" message publishing failed. Subscriber:"),console.info(handler)},0)}})}},Instance.prototype.register=function(moduleId,moduleFactory){var errorMsg=moduleId+" registration failed:";typeGuard("string",moduleId,errorMsg+" module ID must be a string."),typeGuard("string",moduleId,errorMsg+" module ID must be a string."),typeGuard("undefined",this.modules[moduleId],errorMsg+" module with such id has been already registered.");var tempModule=moduleFactory(new this.Sandbox(this,moduleId));return typeGuard("function",tempModule.init,errorMsg+" module does not implement init method."),typeGuard("function",tempModule.destroy,errorMsg+" module does not implement destroy method."),runPlugins.call(this,HookType.Core_ModuleRegister,moduleId,moduleFactory),this.modules[moduleId]={create:moduleFactory,instances:{}},this},Instance.prototype.start=function(moduleId,options){var module=this.modules[moduleId];options=options||{};var errorMsg=moduleId+" initialization failed:";typeGuard("object",module,errorMsg+" module not found."),typeGuard("object",options,errorMsg+" module options must be an object.");var instanceId=options.instanceId||moduleId;if(hasOwnProperty.call(module.instances,instanceId))return this;runPlugins.call(this,HookType.Core_ModuleInit,moduleId,options);var instance=module.create(new this.Sandbox(this,instanceId));return module.instances[instanceId]=instance,instance.init(options),this},Instance.prototype.stop=function(moduleId,instanceId){var module=this.modules[moduleId],id=instanceId||moduleId;return module&&hasOwnProperty.call(module.instances,id)?(runPlugins.call(this,HookType.Core_ModuleDestroy,moduleId,instanceId),module.instances[id].destroy(),delete module.instances[id]):console.warn(moduleId+" destroy failed: "+instanceId+" instance not found."),this},Instance.prototype.listModules=function(){return Object.keys(this.modules)},Instance.prototype.hook=function(hookType,plugin){var errorMsg="Hook plugin failed:";return typeGuard("number",hookType,errorMsg+" hook type should be an HookType enum."),typeGuard("function",plugin,errorMsg+" plugin should be a function."),Array.isArray(this.hooks[hookType])||(this.hooks[hookType]=[]),this.hooks[hookType].push(plugin),this},Instance.prototype.run=function(action){if(!this.state.isRunning)return this.beforeRunAction=action,this._onDomReady=this._onDomReady.bind(this),"complete"===document.readyState||"interactive"===document.readyState||"loaded"===document.readyState?this._onDomReady(null):document.addEventListener("DOMContentLoaded",this._onDomReady),this},Instance.prototype._onDomReady=function(ev){document.removeEventListener("DOMContentLoaded",this._onDomReady),this.state.isRunning=!0,"function"==typeof this.beforeRunAction&&this.beforeRunAction(),runPlugins.call(this,HookType.Core_DOMReady)},Instance}();dcore.Instance=Instance,dcore.createOne=createOne}(dcore||(dcore={}));